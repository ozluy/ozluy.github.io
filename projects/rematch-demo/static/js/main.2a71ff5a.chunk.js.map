{"version":3,"sources":["models/github.js","models/sayac.js","store.js","serviceWorker.js","components/Sayac.js","components/GitHub.js","index.js"],"names":["state","repolar","yukleniyor","hata","reducers","yukleniyoruAyarla","payload","repolariAyarla","hataAyarla","effects","dispatch","kullaniciRepolariniGetir","github","fetch","then","response","status","Error","json","myJson","catch","error","deger","birEkle","birEkleAsync","a","sayac","Promise","resolve","setTimeout","store","init","models","Boolean","window","location","hostname","match","connect","onClick","event","persist","useState","kullaniciAdi","setKullaniciAdi","yildizSirali","setYildizSirali","inputReferansim","useRef","className","onSubmit","preventDefault","type","onChange","current","value","ref","placeholder","message","reposFromAPI","repoListesi","sort","x","y","stargazers_count","length","id","checked","htmlFor","map","name","html_url","language","forks_count","key","target","href","rel","repolariDOMaIsle","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2a71ff5a.chunk.js","sourcesContent":["// github modeli\nexport default {\n  state: { repolar: [], yukleniyor: false, hata: null }, // initial state\n  reducers: {\n    yukleniyoruAyarla: (state, payload) => ({\n      ...state,\n      ...{ yukleniyor: payload },\n    }),\n    repolariAyarla: (state, payload) => ({\n      ...state,\n      ...{ repolar: payload, hata: null },\n    }),\n    hataAyarla: (state, payload) => ({\n      ...state,\n      ...{ hata: payload, repolar: [] },\n    }),\n  },\n  effects: dispatch => ({\n    kullaniciRepolariniGetir: payload => {\n      dispatch.github.yukleniyoruAyarla(true)\n      fetch(`https://api.github.com/users/${payload}/repos`)\n        .then(response => {\n          if (response.status === 404) {\n            throw new Error('Kullanıcı bulunamadı!')\n          } else {\n            return response.json()\n          }\n        })\n        .then(myJson => {\n          dispatch.github.yukleniyoruAyarla(false)\n          dispatch.github.repolariAyarla(myJson)\n        })\n        .catch(error => {\n          dispatch.github.yukleniyoruAyarla(false)\n          dispatch.github.hataAyarla(error)\n        })\n    },\n  }),\n}\n","// sayac modeli\nexport default {\n  state: {\n    yukleniyor: false,\n    deger: 0,\n  }, // initial state\n  reducers: {\n    // handle state changes with pure functions\n    birEkle: state => ({ ...state, ...{ deger: state.deger + 1 } }),\n    yukleniyoruAyarla: (state, payload) => ({ ...state, ...{ yukleniyor: payload } }),\n  },\n  effects: dispatch => ({\n    // handle state changes with impure functions.\n    // use async/await for async actions\n    birEkleAsync: async () => {\n      dispatch.sayac.yukleniyoruAyarla(true)\n      await new Promise(resolve => setTimeout(resolve, 1000))\n      dispatch.sayac.yukleniyoruAyarla(false)\n      dispatch.sayac.birEkle()\n    },\n  }),\n}\n","import { init } from '@rematch/core'\nimport * as models from './models'\n\nconst store = init({ models })\n\nexport default store\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport { connect } from 'react-redux'\n\nconst Sayac = ({ deger, birEkle, birEkleAsync, yukleniyor }) => (\n  <div>\n    <h1>Sayaç değeri = {deger}</h1>\n    <button\n      onClick={event => {\n        event.persist()\n        birEkle()\n      }}\n    >\n      +1\n    </button>\n    <button\n      onClick={event => {\n        event.persist()\n        birEkleAsync()\n      }}\n    >\n      +1 async (1 saniye sonra)\n    </button>\n    <p>&nbsp;{yukleniyor && 'sayaça 1 ekleniyor...'}</p>\n  </div>\n)\n\nconst mapState = ({ sayac: { deger, yukleniyor } }) => ({\n  deger,\n  yukleniyor,\n})\n\nconst mapDispatch = ({ sayac: { birEkle, birEkleAsync } }) => ({\n  birEkle,\n  birEkleAsync,\n})\n\nexport default connect(\n  mapState,\n  mapDispatch\n)(Sayac)\n","import React, { useRef, useState } from 'react'\nimport { connect } from 'react-redux'\n\nconst GitHub = ({ kullaniciRepolariniGetir, yukleniyor, repolar, hata }) => {\n  const [kullaniciAdi, setKullaniciAdi] = useState('ozluy')\n  const [yildizSirali, setYildizSirali] = useState(false)\n  const inputReferansim = useRef(null)\n\n  const repolariDOMaIsle = reposFromAPI => {\n    const repoListesi = yildizSirali\n      ? [...reposFromAPI, ...[]].sort(\n          (x, y) => y.stargazers_count - x.stargazers_count\n        )\n      : reposFromAPI\n    return (\n      <>\n        {repoListesi.length > 0 && (\n          <>\n            <input\n              id='sirala'\n              onChange={() => setYildizSirali(!yildizSirali)}\n              type='checkbox'\n              checked={yildizSirali}\n            />{' '}\n            <label htmlFor='sirala'>Yıldıza göre sırala</label>\n          </>\n        )}\n        <ul>\n          {repoListesi.map(\n            ({ name, html_url, language, stargazers_count, forks_count }) => (\n              <li key={name}>\n                <a target='_blank' href={html_url} rel='noopener noreferrer'>\n                  {name}/{language}, {stargazers_count}⭐️, {forks_count}🍴\n                </a>\n              </li>\n            )\n          )}\n        </ul>\n      </>\n    )\n  }\n\n  return (\n    <form\n      className='github-wrapper'\n      onSubmit={event => {\n        event.preventDefault()\n        setYildizSirali(false)\n        kullaniciRepolariniGetir(kullaniciAdi)\n      }}\n    >\n      <h1>Github</h1>\n      <input\n        type='text'\n        onChange={() => setKullaniciAdi(inputReferansim.current.value)}\n        value={kullaniciAdi}\n        ref={inputReferansim}\n        placeholder='Kullanıcı adi gir'\n      />\n\n      <button type='submit'>Repoları Getir</button>\n      <p>&nbsp;{yukleniyor && 'repolar getiriliyor...'}</p>\n      {hata && <p className='error-message'>{hata.message}</p>}\n      {repolariDOMaIsle(repolar)}\n    </form>\n  )\n}\n\nconst mapState = ({ github: { repolar, yukleniyor, hata } }) => ({\n  repolar,\n  yukleniyor,\n  hata,\n})\n\nconst mapDispatch = ({ github: { kullaniciRepolariniGetir } }) => ({\n  kullaniciRepolariniGetir,\n})\n\nexport default connect(\n  mapState,\n  mapDispatch\n)(GitHub)\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport store from './store'\nimport * as serviceWorker from './serviceWorker'\nimport Sayac from './components/Sayac'\nimport GitHub from './components/GitHub'\nimport './index.css'\n\nReactDOM.render(\n  <Provider store={store}>\n    <Sayac />\n    <GitHub />\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}