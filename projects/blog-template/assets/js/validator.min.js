$.extend($.fn, { validate: function (n) { if (!this.length) { n && n.debug && window.console && console.warn("Nothing selected, can't validate, returning nothing."); return } var t = $.data(this[0], "validator"); if (t) return t; if (this.attr("novalidate", "novalidate"), t = new $.validator(n, this[0]), $.data(this[0], "validator", t), t.settings.onsubmit) { this.on("click.validate", ":submit", function (n) { t.settings.submitHandler && (t.submitButton = n.target); $(this).hasClass("cancel") && (t.cancelSubmit = !0); $(this).attr("formnovalidate") !== undefined && (t.cancelSubmit = !0) }); this.on("submit.validate", function (n) { function i() { var r, i; return t.settings.submitHandler ? (t.submitButton && (r = $("<input type='hidden'/>").attr("name", t.submitButton.name).val($(t.submitButton).val()).appendTo(t.currentForm)), i = t.settings.submitHandler.call(t, t.currentForm, n), t.submitButton && r.remove(), i !== undefined) ? i : !1 : !0 } return (t.settings.debug && n.preventDefault(), t.cancelSubmit) ? (t.cancelSubmit = !1, i()) : t.form() ? t.pendingRequest ? (t.formSubmitted = !0, !1) : i() : (t.focusInvalid(), !1) }) } return t }, valid: function () { var n, t, i; return $(this[0]).is("form") ? n = this.validate().form() : (i = [], n = !0, t = $(this[0].form).validate(), this.each(function () { n = t.element(this) && n; i = i.concat(t.errorList) }), t.errorList = i), n }, rules: function (n, t) { var i = this[0], f, o, u, r, e, s; if (n) { f = $.data(i.form, "validator").settings; o = f.rules; u = $.validator.staticRules(i); switch (n) { case "add": $.extend(u, $.validator.normalizeRule(t)); delete u.messages; o[i.name] = u; t.messages && (f.messages[i.name] = $.extend(f.messages[i.name], t.messages)); break; case "remove": return t ? (s = {}, $.each(t.split(/\s/), function (n, t) { s[t] = u[t]; delete u[t]; t === "required" && $(i).removeAttr("aria-required") }), s) : (delete o[i.name], u) } } return r = $.validator.normalizeRules($.extend({}, $.validator.classRules(i), $.validator.attributeRules(i), $.validator.dataRules(i), $.validator.staticRules(i)), i), r.required && (e = r.required, delete r.required, r = $.extend({ required: e }, r), $(i).attr("aria-required", "true")), r.remote && (e = r.remote, delete r.remote, r = $.extend(r, { remote: e })), r } }); $.extend($.expr[":"], { blank: function (n) { return !$.trim("" + $(n).val()) }, filled: function (n) { return !!$.trim("" + $(n).val()) }, unchecked: function (n) { return !$(n).prop("checked") } }); $.validator = function (n, t) { this.settings = $.extend(!0, {}, $.validator.defaults, n); this.currentForm = t; this.init() }; $.validator.format = function (n, t) { return arguments.length === 1 ? function () { var t = $.makeArray(arguments); return t.unshift(n), $.validator.format.apply(this, t) } : (arguments.length > 2 && t.constructor !== Array && (t = $.makeArray(arguments).slice(1)), t.constructor !== Array && (t = [t]), $.each(t, function (t, i) { n = n.replace(new RegExp("\\{" + t + "\\}", "g"), function () { return i }) }), n) }; $.extend($.validator, { defaults: { messages: {}, groups: {}, rules: {}, errorClass: "error", validClass: "valid", errorElement: "label", focusCleanup: !1, focusInvalid: !0, errorContainer: $([]), errorLabelContainer: $([]), onsubmit: !0, ignore: ":hidden", ignoreTitle: !1, onfocusin: function (n) { this.lastActive = n; this.settings.focusCleanup && (this.settings.unhighlight && this.settings.unhighlight.call(this, n, this.settings.errorClass, this.settings.validClass), this.hideThese(this.errorsFor(n))) }, onfocusout: function (n) { !this.checkable(n) && (n.name in this.submitted || !this.optional(n)) && this.element(n) }, onkeyup: function (n, t) { (t.which !== 9 || this.elementValue(n) !== "") && $.inArray(t.keyCode, [16, 17, 18, 20, 35, 36, 37, 38, 39, 40, 45, 144, 225]) === -1 && (n.name in this.submitted || n === this.lastElement) && this.element(n) }, onclick: function (n) { n.name in this.submitted ? this.element(n) : n.parentNode.name in this.submitted && this.element(n.parentNode) }, highlight: function (n, t, i) { n.type === "radio" ? this.findByName(n.name).addClass(t).removeClass(i) : $(n).addClass(t).removeClass(i) }, unhighlight: function (n, t, i) { n.type === "radio" ? this.findByName(n.name).removeClass(t).addClass(i) : $(n).removeClass(t).addClass(i) } }, setDefaults: function (n) { $.extend($.validator.defaults, n) }, messages: { required: "This field is required.", remote: "Please fix this field.", email: "Please enter a valid email address.", url: "Please enter a valid URL.", date: "Please enter a valid date.", dateISO: "Please enter a valid date ( ISO ).", number: "Please enter a valid number.", digits: "Please enter only digits.", creditcard: "Please enter a valid credit card number.", equalTo: "Please enter the same value again.", maxlength: $.validator.format("Please enter no more than {0} characters."), minlength: $.validator.format("Please enter at least {0} characters."), rangelength: $.validator.format("Please enter a value between {0} and {1} characters long."), range: $.validator.format("Please enter a value between {0} and {1}."), max: $.validator.format("Please enter a value less than or equal to {0}."), min: $.validator.format("Please enter a value greater than or equal to {0}.") }, autoCreateRanges: !1, prototype: { init: function () { function t(n) { var i = $.data(this.form, "validator"), r = "on" + n.type.replace(/^validate/, ""), t = i.settings; t[r] && !$(this).is(t.ignore) && t[r].call(i, this, n) } this.labelContainer = $(this.settings.errorLabelContainer); this.errorContext = this.labelContainer.length && this.labelContainer || $(this.currentForm); this.containers = $(this.settings.errorContainer).add(this.settings.errorLabelContainer); this.submitted = {}; this.valueCache = {}; this.pendingRequest = 0; this.pending = {}; this.invalid = {}; this.reset(); var i = this.groups = {}, n; $.each(this.settings.groups, function (n, t) { typeof t == "string" && (t = t.split(/\s/)); $.each(t, function (t, r) { i[r] = n }) }); n = this.settings.rules; $.each(n, function (t, i) { n[t] = $.validator.normalizeRule(i) }); $(this.currentForm).on("focusin.validate focusout.validate keyup.validate", ":text, [type='password'], [type='file'], select, textarea, [type='number'], [type='search'], [type='tel'], [type='url'], [type='email'], [type='datetime'], [type='date'], [type='month'], [type='week'], [type='time'], [type='datetime-local'], [type='range'], [type='color'], [type='radio'], [type='checkbox']", t).on("click.validate", "select, option, [type='radio'], [type='checkbox']", t); if (this.settings.invalidHandler) $(this.currentForm).on("invalid-form.validate", this.settings.invalidHandler); $(this.currentForm).find("[required], [data-rule-required], .required").attr("aria-required", "true") }, form: function () { return this.checkForm(), $.extend(this.submitted, this.errorMap), this.invalid = $.extend({}, this.errorMap), this.valid() || $(this.currentForm).triggerHandler("invalid-form", [this]), this.showErrors(), this.valid() }, checkForm: function () { this.prepareForm(); for (var n = 0, t = this.currentElements = this.elements() ; t[n]; n++) this.check(t[n]); return this.valid() }, element: function (n) { var r = this.clean(n), t = this.validationTargetFor(r), i = !0; return this.lastElement = t, t === undefined ? delete this.invalid[r.name] : (this.prepareElement(t), this.currentElements = $(t), i = this.check(t) !== !1, i ? delete this.invalid[t.name] : this.invalid[t.name] = !0), $(n).attr("aria-invalid", !i), this.numberOfInvalids() || (this.toHide = this.toHide.add(this.containers)), this.showErrors(), i }, showErrors: function (n) { if (n) { $.extend(this.errorMap, n); this.errorList = []; for (var t in n) this.errorList.push({ message: n[t], element: this.findByName(t)[0] }); this.successList = $.grep(this.successList, function (t) { return !(t.name in n) }) } this.settings.showErrors ? this.settings.showErrors.call(this, this.errorMap, this.errorList) : this.defaultShowErrors() }, resetForm: function () { $.fn.resetForm && $(this.currentForm).resetForm(); this.submitted = {}; this.lastElement = null; this.prepareForm(); this.hideErrors(); var n, t = this.elements().removeData("previousValue").removeAttr("aria-invalid"); if (this.settings.unhighlight) for (n = 0; t[n]; n++) this.settings.unhighlight.call(this, t[n], this.settings.errorClass, ""); else t.removeClass(this.settings.errorClass) }, numberOfInvalids: function () { return this.objectLength(this.invalid) }, objectLength: function (n) { var t = 0; for (var i in n) t++; return t }, hideErrors: function () { this.hideThese(this.toHide) }, hideThese: function (n) { n.not(this.containers).text(""); this.addWrapper(n).hide() }, valid: function () { return this.size() === 0 }, size: function () { return this.errorList.length }, focusInvalid: function () { if (this.settings.focusInvalid) try { $(this.findLastActive() || this.errorList.length && this.errorList[0].element || []).filter(":visible").focus().trigger("focusin") } catch (n) { } }, findLastActive: function () { var n = this.lastActive; return n && $.grep(this.errorList, function (t) { return t.element.name === n.name }).length === 1 && n }, elements: function () { var n = this, t = {}; return $(this.currentForm).find("input, select, textarea").not(":submit, :reset, :image, :disabled").not(this.settings.ignore).filter(function () { return (!this.name && n.settings.debug && window.console && console.error("%o has no name assigned", this), this.name in t || !n.objectLength($(this).rules())) ? !1 : (t[this.name] = !0, !0) }) }, clean: function (n) { return $(n)[0] }, errors: function () { var n = this.settings.errorClass.split(" ").join("."); return $(this.settings.errorElement + "." + n, this.errorContext) }, reset: function () { this.successList = []; this.errorList = []; this.errorMap = {}; this.toShow = $([]); this.toHide = $([]); this.currentElements = $([]) }, prepareForm: function () { this.reset(); this.toHide = this.errors().add(this.containers) }, prepareElement: function (n) { this.reset(); this.toHide = this.errorsFor(n) }, elementValue: function (n) { var t, r = $(n), i = n.type; return i === "radio" || i === "checkbox" ? this.findByName(n.name).filter(":checked").val() : i === "number" && typeof n.validity != "undefined" ? n.validity.badInput ? !1 : r.val() : (t = r.val(), typeof t == "string") ? t.replace(/\r/g, "") : t }, check: function (n) { n = this.validationTargetFor(this.clean(n)); var i = $(n).rules(), o = $.map(i, function (n, t) { return t }).length, e = !1, s = this.elementValue(n), r, u, t; for (u in i) { t = { method: u, parameters: i[u] }; try { if (r = $.validator.methods[u].call(this, s, n, t.parameters), r === "dependency-mismatch" && o === 1) { e = !0; continue } if (e = !1, r === "pending") { this.toHide = this.toHide.not(this.errorsFor(n)); return } if (!r) return this.formatAndAdd(n, t), !1 } catch (f) { this.settings.debug && window.console && console.log("Exception occurred when checking element " + n.id + ", check the '" + t.method + "' method.", f); f instanceof TypeError && (f.message += ".  Exception occurred when checking element " + n.id + ", check the '" + t.method + "' method."); throw f; } } if (!e) return this.objectLength(i) && this.successList.push(n), !0 }, customDataMessage: function (n, t) { return $(n).data("msg" + t.charAt(0).toUpperCase() + t.substring(1).toLowerCase()) || $(n).data("msg") }, customMessage: function (n, t) { var i = this.settings.messages[n]; return i && (i.constructor === String ? i : i[t]) }, findDefined: function () { for (var n = 0; n < arguments.length; n++) if (arguments[n] !== undefined) return arguments[n]; return undefined }, defaultMessage: function (n, t) { return this.findDefined(this.customMessage(n.name, t), this.customDataMessage(n, t), !this.settings.ignoreTitle && n.title || undefined, $.validator.messages[t], "<strong>Warning: No message defined for " + n.name + "<\/strong>") }, formatAndAdd: function (n, t) { var i = this.defaultMessage(n, t.method), r = /\$?\{(\d+)\}/g; typeof i == "function" ? i = i.call(this, t.parameters, n) : r.test(i) && (i = $.validator.format(i.replace(r, "{$1}"), t.parameters)); this.errorList.push({ message: i, element: n, method: t.method }); this.errorMap[n.name] = i; this.submitted[n.name] = i }, addWrapper: function (n) { return this.settings.wrapper && (n = n.add(n.parent(this.settings.wrapper))), n }, defaultShowErrors: function () { for (var i, t, n = 0; this.errorList[n]; n++) t = this.errorList[n], this.settings.highlight && this.settings.highlight.call(this, t.element, this.settings.errorClass, this.settings.validClass), this.showLabel(t.element, t.message); if (this.errorList.length && (this.toShow = this.toShow.add(this.containers)), this.settings.success) for (n = 0; this.successList[n]; n++) this.showLabel(this.successList[n]); if (this.settings.unhighlight) for (n = 0, i = this.validElements() ; i[n]; n++) this.settings.unhighlight.call(this, i[n], this.settings.errorClass, this.settings.validClass); this.toHide = this.toHide.not(this.toShow); this.hideErrors(); this.addWrapper(this.toShow).show() }, validElements: function () { return this.currentElements.not(this.invalidElements()) }, invalidElements: function () { return $(this.errorList).map(function () { return this.element }) }, showLabel: function (n, t) { var r, e, f, i = this.errorsFor(n), o = this.idOrName(n), u = $(n).attr("aria-describedby"); i.length ? (i.removeClass(this.settings.validClass).addClass(this.settings.errorClass), i.html(t)) : (i = $("<" + this.settings.errorElement + ">").attr("id", o + "-error").addClass(this.settings.errorClass).html(t || ""), r = i, this.settings.wrapper && (r = i.hide().show().wrap("<" + this.settings.wrapper + "/>").parent()), this.labelContainer.length ? this.labelContainer.append(r) : this.settings.errorPlacement ? this.settings.errorPlacement(r, $(n)) : r.insertAfter(n), i.is("label") ? i.attr("for", o) : i.parents("label[for='" + o + "']").length === 0 && (f = i.attr("id").replace(/(:|\.|\[|\]|\$)/g, "\\$1"), u ? u.match(new RegExp("\\b" + f + "\\b")) || (u += " " + f) : u = f, $(n).attr("aria-describedby", u), e = this.groups[n.name], e && $.each(this.groups, function (n, t) { t === e && $("[name='" + n + "']", this.currentForm).attr("aria-describedby", i.attr("id")) }))); !t && this.settings.success && (i.text(""), typeof this.settings.success == "string" ? i.addClass(this.settings.success) : this.settings.success(i, n)); this.toShow = this.toShow.add(i) }, errorsFor: function (n) { var i = this.idOrName(n), r = $(n).attr("aria-describedby"), t = "label[for='" + i + "'], label[for='" + i + "'] *"; return r && (t = t + ", #" + r.replace(/\s+/g, ", #")), this.errors().filter(t) }, idOrName: function (n) { return this.groups[n.name] || (this.checkable(n) ? n.name : n.id || n.name) }, validationTargetFor: function (n) { return this.checkable(n) && (n = this.findByName(n.name)), $(n).not(this.settings.ignore)[0] }, checkable: function (n) { return /radio|checkbox/i.test(n.type) }, findByName: function (n) { return $(this.currentForm).find("[name='" + n + "']") }, getLength: function (n, t) { switch (t.nodeName.toLowerCase()) { case "select": return $("option:selected", t).length; case "input": if (this.checkable(t)) return this.findByName(t.name).filter(":checked").length } return n.length }, depend: function (n, t) { return this.dependTypes[typeof n] ? this.dependTypes[typeof n](n, t) : !0 }, dependTypes: { boolean: function (n) { return n }, string: function (n, t) { return !!$(n, t.form).length }, "function": function (n, t) { return n(t) } }, optional: function (n) { var t = this.elementValue(n); return !$.validator.methods.required.call(this, t, n) && "dependency-mismatch" }, startRequest: function (n) { this.pending[n.name] || (this.pendingRequest++, this.pending[n.name] = !0) }, stopRequest: function (n, t) { this.pendingRequest--; this.pendingRequest < 0 && (this.pendingRequest = 0); delete this.pending[n.name]; t && this.pendingRequest === 0 && this.formSubmitted && this.form() ? ($(this.currentForm).submit(), this.formSubmitted = !1) : !t && this.pendingRequest === 0 && this.formSubmitted && ($(this.currentForm).triggerHandler("invalid-form", [this]), this.formSubmitted = !1) }, previousValue: function (n) { return $.data(n, "previousValue") || $.data(n, "previousValue", { old: null, valid: !0, message: this.defaultMessage(n, "remote") }) }, destroy: function () { this.resetForm(); $(this.currentForm).off(".validate").removeData("validator") } }, classRuleSettings: { required: { required: !0 }, email: { email: !0 }, url: { url: !0 }, date: { date: !0 }, dateISO: { dateISO: !0 }, number: { number: !0 }, digits: { digits: !0 }, creditcard: { creditcard: !0 } }, addClassRules: function (n, t) { n.constructor === String ? this.classRuleSettings[n] = t : $.extend(this.classRuleSettings, n) }, classRules: function (n) { var t = {}, i = $(n).attr("class"); return i && $.each(i.split(" "), function () { this in $.validator.classRuleSettings && $.extend(t, $.validator.classRuleSettings[this]) }), t }, normalizeAttributeRule: function (n, t, i, r) { /min|max/.test(i) && (t === null || /number|range|text/.test(t)) && (r = Number(r), isNaN(r) && (r = undefined)); r || r === 0 ? n[i] = r : t === i && t !== "range" && (n[i] = !0) }, attributeRules: function (n) { var i = {}, u = $(n), f = n.getAttribute("type"), r, t; for (r in $.validator.methods) r === "required" ? (t = n.getAttribute(r), t === "" && (t = !0), t = !!t) : t = u.attr(r), this.normalizeAttributeRule(i, f, r, t); return i.maxlength && /-1|2147483647|524288/.test(i.maxlength) && delete i.maxlength, i }, dataRules: function (n) { var i = {}, u = $(n), f = n.getAttribute("type"), t, r; for (t in $.validator.methods) r = u.data("rule" + t.charAt(0).toUpperCase() + t.substring(1).toLowerCase()), this.normalizeAttributeRule(i, f, t, r); return i }, staticRules: function (n) { var t = {}, i = $.data(n.form, "validator"); return i.settings.rules && (t = $.validator.normalizeRule(i.settings.rules[n.name]) || {}), t }, normalizeRules: function (n, t) { return $.each(n, function (i, r) { if (r === !1) { delete n[i]; return } if (r.param || r.depends) { var u = !0; switch (typeof r.depends) { case "string": u = !!$(r.depends, t.form).length; break; case "function": u = r.depends.call(t, t) } u ? n[i] = r.param !== undefined ? r.param : !0 : delete n[i] } }), $.each(n, function (i, r) { n[i] = $.isFunction(r) ? r(t) : r }), $.each(["minlength", "maxlength"], function () { n[this] && (n[this] = Number(n[this])) }), $.each(["rangelength", "range"], function () { var t; n[this] && ($.isArray(n[this]) ? n[this] = [Number(n[this][0]), Number(n[this][1])] : typeof n[this] == "string" && (t = n[this].replace(/[\[\]]/g, "").split(/[\s,]+/), n[this] = [Number(t[0]), Number(t[1])])) }), $.validator.autoCreateRanges && (n.min != null && n.max != null && (n.range = [n.min, n.max], delete n.min, delete n.max), n.minlength != null && n.maxlength != null && (n.rangelength = [n.minlength, n.maxlength], delete n.minlength, delete n.maxlength)), n }, normalizeRule: function (n) { if (typeof n == "string") { var t = {}; $.each(n.split(/\s/), function () { t[this] = !0 }); n = t } return n }, addMethod: function (n, t, i) { $.validator.methods[n] = t; $.validator.messages[n] = i !== undefined ? i : $.validator.messages[n]; t.length < 3 && $.validator.addClassRules(n, $.validator.normalizeRule(n)) }, methods: { required: function (n, t, i) { if (!this.depend(i, t)) return "dependency-mismatch"; if (t.nodeName.toLowerCase() === "select") { var r = $(t).val(); return r && r.length > 0 } return this.checkable(t) ? this.getLength(n, t) > 0 : n.length > 0 }, email: function (n, t) { return this.optional(t) || /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(n) }, url: function (n, t) { return this.optional(t) || /^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})).?)(?::\d{2,5})?(?:[/?#]\S*)?$/i.test(n) }, date: function (n, t) { return this.optional(t) || !/Invalid|NaN/.test(new Date(n).toString()) }, dateISO: function (n, t) { return this.optional(t) || /^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test(n) }, number: function (n, t) { return this.optional(t) || /^(?:-?\d+|-?\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(n) }, digits: function (n, t) { return this.optional(t) || /^\d+$/.test(n) }, creditcard: function (n, t) { if (this.optional(t)) return "dependency-mismatch"; if (/[^0-9 \-]+/.test(n)) return !1; var f = 0, i = 0, u = !1, r, e; if (n = n.replace(/\D/g, ""), n.length < 13 || n.length > 19) return !1; for (r = n.length - 1; r >= 0; r--) e = n.charAt(r), i = parseInt(e, 10), u && (i *= 2) > 9 && (i -= 9), f += i, u = !u; return f % 10 == 0 }, minlength: function (n, t, i) { var r = $.isArray(n) ? n.length : this.getLength(n, t); return this.optional(t) || r >= i }, maxlength: function (n, t, i) { var r = $.isArray(n) ? n.length : this.getLength(n, t); return this.optional(t) || r <= i }, rangelength: function (n, t, i) { var r = $.isArray(n) ? n.length : this.getLength(n, t); return this.optional(t) || r >= i[0] && r <= i[1] }, min: function (n, t, i) { return this.optional(t) || n >= i }, max: function (n, t, i) { return this.optional(t) || n <= i }, range: function (n, t, i) { return this.optional(t) || n >= i[0] && n <= i[1] }, equalTo: function (n, t, i) { var r = $(i); if (this.settings.onfocusout) r.off(".validate-equalTo").on("blur.validate-equalTo", function () { $(t).valid() }); return n === r.val() }, remote: function (n, t, i) { if (this.optional(t)) return "dependency-mismatch"; var u = this.previousValue(t), r, f; return (this.settings.messages[t.name] || (this.settings.messages[t.name] = {}), u.originalMessage = this.settings.messages[t.name].remote, this.settings.messages[t.name].remote = u.message, i = typeof i == "string" && { url: i } || i, u.old === n) ? u.valid : (u.old = n, r = this, this.startRequest(t), f = {}, f[t.name] = n, $.ajax($.extend(!0, { mode: "abort", port: "validate" + t.name, dataType: "json", data: f, context: r.currentForm, success: function (i) { var e = i === !0 || i === "true", o, f, s; r.settings.messages[t.name].remote = u.originalMessage; e ? (s = r.formSubmitted, r.prepareElement(t), r.formSubmitted = s, r.successList.push(t), delete r.invalid[t.name], r.showErrors()) : (o = {}, f = i || r.defaultMessage(t, "remote"), o[t.name] = u.message = $.isFunction(f) ? f(n) : f, r.invalid[t.name] = !0, r.showErrors(o)); u.valid = e; r.stopRequest(t, e) } }, i)), "pending") } } });
//# sourceMappingURL=validator.min.js.map
