{"version":3,"sources":["components/ReactPuzzleConfirm/index.js","App.js","serviceWorker.js","index.js"],"names":["ReactPuzzleConfirm","onSuccess","console","log","onFail","onClose","title","sliderTitle","failMessage","successMessage","closeButtonLabel","refrefButtonLabel","disableRefreshIdleState","randomValueCreator","min","Math","ceil","max","floor","random","useState","value","setValue","status","setStatus","randomValue","setRandomValue","handleAttempt","setTimeout","isFailed","statusMessage","className","style","left","backgroundPositionX","disabled","type","onMouseUp","onTouchEnd","name","onChange","event","persist","selectedValue","target","isNaN","parseInt","onClick","App","popupVisible","setPopupVisible","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wSA+HeA,MA7Hf,YAWI,IAAD,IAVDC,iBAUC,MAVW,kBAAMC,QAAQC,IAAI,YAU7B,MATDC,cASC,MATQ,kBAAMF,QAAQC,IAAI,SAS1B,MARDE,eAQC,MARS,kBAAMH,QAAQC,IAAI,kBAQ3B,MAPDG,aAOC,MAPO,wCAOP,MANDC,mBAMC,MANa,+BAMb,MALDC,mBAKC,MALa,QAKb,MAJDC,sBAIC,MAJgB,UAIhB,MAHDC,wBAGC,MAHkB,QAGlB,MAFDC,yBAEC,MAFmB,UAEnB,MADDC,+BACC,SAIKC,EAAqB,WACzB,IAAMC,EAAMC,KAAKC,KAJF,GAKTC,EAAMF,KAAKG,MAJF,IAQf,OAFEH,KAAKG,MAAMH,KAAKI,UAAYF,EAAMH,EAAM,IAAMA,GARjD,EAYyBM,mBAAS,GAZlC,mBAYMC,EAZN,KAYaC,EAZb,OAa2BF,mBAAS,QAbpC,mBAaMG,EAbN,KAacC,EAbd,OAcqCJ,mBAASP,KAd9C,mBAcMY,EAdN,KAcmBC,EAdnB,KAgBKC,EAAgB,WAChBN,IAAUI,GACZD,EAAU,WACVI,YAAW,kBAAM3B,MAAa,OAE9BuB,EAAU,UACVpB,MAIEyB,EAAsB,WAAXN,EACXO,EAAgBD,EAAWrB,EAAcC,EAE/C,OACE,yBAAKsB,UAAU,8BACb,yBAAKA,UAAU,wBACb,wBAAIA,UAAU,8BAA8BzB,GAC5C,yBAAKyB,UAAU,6BACb,yBAAKA,UAAU,uCACb,yBAAKA,UAAU,+BACb,yBACEA,UAAS,qCACI,YAAXR,EAAuB,YAAc,MAGzC,yBACEQ,UAAU,4CACVC,MAAO,CACLC,KAAK,GAAD,OAzCD,EAyCMZ,EAAL,QAGN,yBACEU,UAAU,iDACVC,MAAO,CACLE,oBA/CC,GA+CqBT,EAA2B,MAGrD,yBAAKM,UAAU,mDACf,yBAAKA,UAAU,oDACf,yBAAKA,UAAU,sDAEjB,yBACEA,UAAU,sEACVC,MAAO,CAAEC,KAAK,GAAD,OAxDR,EAwDaR,EAAL,WAInB,2BACEU,SAAUN,EACVO,KAAK,QACLL,UAAWF,EAAW,uCAAyC,GAC/DQ,UAAWV,EACXW,WAAYX,EACZY,KAAK,SACLlB,MAAOA,EACPmB,SAAU,SAAAC,GACRA,EAAMC,UACN,IAAMC,EAAgBF,EAAMG,OAAOvB,OAClCwB,MAAMF,IAAkBrB,EAASwB,SAASH,KAE7C7B,IAAI,IACJG,IA3EO,KA6ET,yBAAKc,UAAU,oCAAoCxB,IAGrD,yBACEwB,UAAS,qCACPF,EAAW,mCAAqC,KAFpD,QAKqB,SAAXN,GAAqBO,GAG/B,yBAAKC,UAAU,qCACb,4BACEA,UAAU,qEACVgB,QAAS1C,GAERK,GAEH,4BACEqB,UAAU,8BACVI,UAAWN,GAAYjB,EACvBmC,QAAS,WACPrB,EAAeb,KACfS,EAAS,GACTE,EAAU,UAGXb,OC9FEqC,EApBH,WAAO,IAAD,EACwB5B,oBAAS,GADjC,mBACT6B,EADS,KACKC,EADL,KAGhB,OACE,yBAAKnB,UAAU,OACb,4BAAQA,UAAU,cACfkB,GACC,kBAAC,EAAD,CACEhD,UAAW,kBAAMiD,GAAgB,IACjC7C,QAAS,kBAAM6C,GAAgB,MAGnC,4BAAQH,QAAS,kBAAMG,GAAgB,KAAvC,0BCLYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.be9e42fe.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\nfunction ReactPuzzleConfirm({\n  onSuccess = () => console.log('success'),\n  onFail = () => console.log('fail'),\n  onClose = () => console.log('close clicked'),\n  title = 'Please fit the puzzle piece carefully',\n  sliderTitle = 'Slide to complete the puzzle',\n  failMessage = 'Error',\n  successMessage = 'Success',\n  closeButtonLabel = 'Close',\n  refrefButtonLabel = 'Refresh',\n  disableRefreshIdleState = true,\n}) {\n  const minValue = 6\n  const maxValue = 36\n  const multiplier = 5\n  const randomValueCreator = () => {\n    const min = Math.ceil(minValue)\n    const max = Math.floor(maxValue)\n    const randomIntegerInclusive =\n      Math.floor(Math.random() * (max - min + 1)) + min\n\n    return randomIntegerInclusive\n  }\n  const [value, setValue] = useState(0)\n  const [status, setStatus] = useState('Idle')\n  const [randomValue, setRandomValue] = useState(randomValueCreator())\n\n  const handleAttempt = () => {\n    if (value === randomValue) {\n      setStatus('Success')\n      setTimeout(() => onSuccess(), 1000)\n    } else {\n      setStatus('Failed')\n      onFail()\n    }\n  }\n\n  const isFailed = status === 'Failed'\n  const statusMessage = isFailed ? failMessage : successMessage\n\n  return (\n    <div className='react-puzzle-confirm-modal'>\n      <div className='react-puzzle-confirm'>\n        <h1 className='react-puzzle-confirm-title'>{title}</h1>\n        <div className='react-puzzle-confirm-body'>\n          <div className='react-puzzle-confirm-puzzle-wrapper'>\n            <div className='react-puzzle-confirm-puzzle'>\n              <div\n                className={`react-puzzle-confirm-flash ${\n                  status === 'Success' ? 'flash--me' : ''\n                }`}\n              />\n              <div\n                className='react-puzzle-confirm-puzzle-missing-piece'\n                style={{\n                  left: `${value * multiplier}px`,\n                }}\n              >\n                <div\n                  className='react-puzzle-confirm-puzzle-missing-piece-main'\n                  style={{\n                    backgroundPositionX: -randomValue * multiplier - 1 / 2,\n                  }}\n                />\n                <div className='react-puzzle-confirm-puzzle-missing-piece-left' />\n                <div className='react-puzzle-confirm-puzzle-missing-piece-right' />\n                <div className='react-puzzle-confirm-puzzle-missing-piece-circle' />\n              </div>\n              <div\n                className='react-puzzle-confirm-puzzle-missing-piece missing-piece-placeholder'\n                style={{ left: `${randomValue * multiplier}px` }}\n              />\n            </div>\n          </div>\n          <input\n            disabled={isFailed}\n            type='range'\n            className={isFailed ? 'react-puzzle-confirm-slider-disabled' : ''}\n            onMouseUp={handleAttempt}\n            onTouchEnd={handleAttempt}\n            name='points'\n            value={value}\n            onChange={event => {\n              event.persist()\n              const selectedValue = event.target.value\n              !isNaN(selectedValue) && setValue(parseInt(selectedValue))\n            }}\n            min='0'\n            max={maxValue}\n          />\n          <div className='react-puzzle-confirm-slider-note'>{sliderTitle}</div>\n        </div>\n\n        <div\n          className={`react-puzzle-confirm-state ${\n            isFailed ? 'react-puzzle-confirm-state--fail' : ''\n          }`}\n        >\n          &nbsp; {status !== 'Idle' && statusMessage}\n        </div>\n\n        <div className='react-puzzle-confirm-button-group'>\n          <button\n            className='react-puzzle-confirm-button react-puzzle-confirm-button--secondary'\n            onClick={onClose}\n          >\n            {closeButtonLabel}\n          </button>\n          <button\n            className='react-puzzle-confirm-button'\n            disabled={!isFailed && disableRefreshIdleState}\n            onClick={() => {\n              setRandomValue(randomValueCreator())\n              setValue(0)\n              setStatus('Idle')\n            }}\n          >\n            {refrefButtonLabel}\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default ReactPuzzleConfirm\n","import React, { useState } from 'react'\nimport './App.scss'\nimport './components/ReactPuzzleConfirm/index.scss'\nimport ReactPuzzleConfirm from './components/ReactPuzzleConfirm/index.js'\n\nconst App = () => {\n  const [popupVisible, setPopupVisible] = useState(false)\n\n  return (\n    <div className='App'>\n      <header className='App-header'>\n        {popupVisible && (\n          <ReactPuzzleConfirm\n            onSuccess={() => setPopupVisible(false)}\n            onClose={() => setPopupVisible(false)}\n          />\n        )}\n        <button onClick={() => setPopupVisible(true)}>\n          open puzzle confirm\n        </button>\n      </header>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}