{"version":3,"sources":["components/ReactPuzzleConfirm/index.js","App.js","serviceWorker.js","index.js"],"names":["ReactPuzzleConfirm","minValue","maxValue","multiplier","onSuccess","console","log","onFail","onClose","randomValueCreator","min","Math","ceil","max","floor","random","useState","value","setValue","status","setStatus","randomValue","setRandomValue","handleAttempt","setTimeout","isFailed","className","style","left","backgroundPositionX","disabled","type","onMouseUp","onTouchEnd","name","onChange","event","persist","selectedValue","target","isNaN","parseInt","onClick","App","popupVisible","setPopupVisible","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wSAkHeA,MAhHf,YAOI,IAAD,IANDC,gBAMC,MANU,EAMV,MALDC,gBAKC,MALU,GAKV,MAJDC,kBAIC,MAJY,EAIZ,MAHDC,iBAGC,MAHW,kBAAMC,QAAQC,IAAI,YAG7B,MAFDC,cAEC,MAFQ,kBAAMF,QAAQC,IAAI,SAE1B,MADDE,eACC,MADS,kBAAMH,QAAQC,IAAI,kBAC3B,EACKG,EAAqB,WACzB,IAAMC,EAAMC,KAAKC,KAAKX,GAChBY,EAAMF,KAAKG,MAAMZ,GAIvB,OAFES,KAAKG,MAAMH,KAAKI,UAAYF,EAAMH,EAAM,IAAMA,GALjD,EASyBM,mBAAS,GATlC,mBASMC,EATN,KASaC,EATb,OAU2BF,mBAAS,QAVpC,mBAUMG,EAVN,KAUcC,EAVd,OAWqCJ,mBAASP,KAX9C,mBAWMY,EAXN,KAWmBC,EAXnB,KAaKC,EAAgB,WAChBN,IAAUI,GACZD,EAAU,WACVI,YAAW,kBAAMpB,MAAa,OAE9BgB,EAAU,UACVb,MAIEkB,EAAsB,WAAXN,EAEjB,OACE,yBAAKO,UAAU,8BACb,yBAAKA,UAAU,wBACb,wBAAIA,UAAU,8BAAd,yCAGA,yBAAKA,UAAU,6BACb,yBAAKA,UAAU,uCACb,yBAAKA,UAAU,+BACb,yBACEA,UAAS,qCACI,YAAXP,EAAuB,YAAc,MAGzC,yBACEO,UAAU,4CACVC,MAAO,CACLC,KAAK,GAAD,OAAKX,EAAQd,EAAb,MACJ0B,qBAAsBR,EAAclB,EAAa,MAGrD,yBACEuB,UAAU,sEACVC,MAAO,CAAEC,KAAK,GAAD,OAAKP,EAAclB,EAAnB,WAInB,2BACE2B,SAAUL,EACVM,KAAK,QACLL,UAAWD,EAAW,uCAAyC,GAC/DO,UAAWT,EACXU,WAAYV,EACZW,KAAK,SACLjB,MAAOA,EACPkB,SAAU,SAAAC,GACRA,EAAMC,UACN,IAAMC,EAAgBF,EAAMG,OAAOtB,OAClCuB,MAAMF,IAAkBpB,EAASuB,SAASH,KAE7C5B,IAAI,IACJG,IAAKX,IAEP,yBAAKwB,UAAU,oCAAf,iCAKF,yBACEA,UAAS,qCACPD,EAAW,mCAAqC,KAFpD,QAKqB,SAAXN,GAAqBA,GAG/B,yBAAKO,UAAU,qCACb,4BACEA,UAAU,qEACVgB,QAAS,kBAAMlC,IAFjB,SAMA,4BACEkB,UAAU,8BACVI,UAAWL,EACXiB,QAAS,WACPpB,EAAeb,KACfS,EAAS,GACTE,EAAU,UANd,eC/EKuB,EAbH,WAAO,IAAD,EACwB3B,oBAAS,GADjC,mBACT4B,EADS,KACKC,EADL,KAGhB,OACE,yBAAKnB,UAAU,OACb,4BAAQA,UAAU,cACfkB,GAAgB,kBAAC,EAAD,CAAoBxC,UAAW,kBAAKyC,GAAgB,MACrE,4BAAQH,QAAS,kBAAMG,GAAgB,KAAvC,0BCAYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ea9d3753.chunk.js","sourcesContent":["import React, { useState } from 'react'\n\nfunction ReactPuzzleConfirm({\n  minValue = 6,\n  maxValue = 36,\n  multiplier = 5,\n  onSuccess = () => console.log('success'),\n  onFail = () => console.log('fail'),\n  onClose = () => console.log('close clicked'),\n}) {\n  const randomValueCreator = () => {\n    const min = Math.ceil(minValue)\n    const max = Math.floor(maxValue)\n    const randomIntegerInclusive =\n      Math.floor(Math.random() * (max - min + 1)) + min\n\n    return randomIntegerInclusive\n  }\n  const [value, setValue] = useState(0)\n  const [status, setStatus] = useState('Idle')\n  const [randomValue, setRandomValue] = useState(randomValueCreator())\n\n  const handleAttempt = () => {\n    if (value === randomValue) {\n      setStatus('Success')\n      setTimeout(() => onSuccess(), 1000)\n    } else {\n      setStatus('Failed')\n      onFail()\n    }\n  }\n\n  const isFailed = status === 'Failed'\n\n  return (\n    <div className='react-puzzle-confirm-modal'>\n      <div className='react-puzzle-confirm'>\n        <h1 className='react-puzzle-confirm-title'>\n          Please fit the puzzle piece carefully\n        </h1>\n        <div className='react-puzzle-confirm-body'>\n          <div className='react-puzzle-confirm-puzzle-wrapper'>\n            <div className='react-puzzle-confirm-puzzle'>\n              <div\n                className={`react-puzzle-confirm-flash ${\n                  status === 'Success' ? 'flash--me' : ''\n                }`}\n              />\n              <div\n                className='react-puzzle-confirm-puzzle-missing-piece'\n                style={{\n                  left: `${value * multiplier}px`,\n                  backgroundPositionX: -randomValue * multiplier - 1 / 2,\n                }}\n              />\n              <div\n                className='react-puzzle-confirm-puzzle-missing-piece missing-piece-placeholder'\n                style={{ left: `${randomValue * multiplier}px` }}\n              />\n            </div>\n          </div>\n          <input\n            disabled={isFailed}\n            type='range'\n            className={isFailed ? 'react-puzzle-confirm-slider-disabled' : ''}\n            onMouseUp={handleAttempt}\n            onTouchEnd={handleAttempt}\n            name='points'\n            value={value}\n            onChange={event => {\n              event.persist()\n              const selectedValue = event.target.value\n              !isNaN(selectedValue) && setValue(parseInt(selectedValue))\n            }}\n            min='0'\n            max={maxValue}\n          />\n          <div className='react-puzzle-confirm-slider-note'>\n            Slide to complete the puzzle\n          </div>\n        </div>\n\n        <div\n          className={`react-puzzle-confirm-state ${\n            isFailed ? 'react-puzzle-confirm-state--fail' : ''\n          }`}\n        >\n          &nbsp; {status !== 'Idle' && status}\n        </div>\n\n        <div className='react-puzzle-confirm-button-group'>\n          <button\n            className='react-puzzle-confirm-button react-puzzle-confirm-button--secondary'\n            onClick={() => onClose}\n          >\n            close\n          </button>\n          <button\n            className='react-puzzle-confirm-button'\n            disabled={!isFailed}\n            onClick={() => {\n              setRandomValue(randomValueCreator())\n              setValue(0)\n              setStatus('Idle')\n            }}\n          >\n            refresh\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default ReactPuzzleConfirm\n","import React, { useState } from 'react'\nimport './App.scss'\nimport './components/ReactPuzzleConfirm/index.scss'\nimport ReactPuzzleConfirm from './components/ReactPuzzleConfirm/index.js'\n\nconst App = () => {\n  const [popupVisible, setPopupVisible] = useState(false)\n\n  return (\n    <div className='App'>\n      <header className='App-header'>\n        {popupVisible && <ReactPuzzleConfirm onSuccess={()=> setPopupVisible(false)} />}\n        <button onClick={() => setPopupVisible(true)}>open puzzle confirm</button>\n      </header>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}